name: Azure Terraform GitOps (OCI back-end)

on:
  pull_request:
    branches:
      - main
    paths:
      - 'azure/**'
  pull_request_target:
    types:
      - closed
    branches:
      - main
    paths:
      - 'azure/**'

  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  terraform:
    name: Terraform
    runs-on: self-hosted
    permissions:
      contents: read
      pull-requests: write
      packages: read
      repository-projects: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Clone Azure Orchestrator
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: git clone https://${GH_TOKEN}@github.com/iblake/clickops-orchestrator-azure.git ORCH

    - name: Load Runner Environment
      run: |
        # Load variables from runner environment (more secure)
        source $HOME/.github-runner-env
        echo "‚úÖ ARM credentials loaded from runner environment"

    - name: Replace Subscription ID in config files
      run: |
        source $HOME/.github-runner-env
        find ${{ github.workspace }}/azure/fra -name '*.json' -exec sed -i "s|__SUBSCRIPTION_ID__|$ARM_SUBSCRIPTION_ID|g" {} \;
        echo "‚úÖ Subscription ID replaced in configuration files"

    - name: Azure CLI Login
      run: |
        # Use variables from runner environment
        source $HOME/.github-runner-env
        az login --service-principal \
          --username "$ARM_CLIENT_ID" \
          --password "$ARM_CLIENT_SECRET" \
          --tenant "$ARM_TENANT_ID" > /dev/null 2>&1
        az account set --subscription "$ARM_SUBSCRIPTION_ID" > /dev/null 2>&1
        echo "‚úÖ Azure login successful"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1
        terraform_wrapper: true

    - name: Render versions.tf from template
      run: |
        # Use variables from runner environment
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        envsubst < versions.tf.template > versions.tf
        terraform fmt versions.tf

    - name: Terraform Init
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        terraform init

    - name: Terraform Format
      id: format
      if: github.event_name == 'pull_request'
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        terraform fmt -check

    - name: Terraform Validate
      id: validate
      if: github.event_name == 'pull_request'
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        terraform validate -no-color

    - name: Validate SSH Key Availability (OCI Pattern)
      id: ssh-key
      run: |
        SSH_KEY_PATH="$HOME/.ssh/azure_vm_key.pub"
        if [ ! -f "$SSH_KEY_PATH" ]; then
          echo "SSH public key not found at $SSH_KEY_PATH"
          echo "Please ensure your self-hosted runner has SSH keys configured"
          echo "Run: ssh-keygen -t rsa -b 4096 -f $HOME/.ssh/azure_vm_key -N ''"
          exit 1
        fi
        echo "SSH key found and ready"
        echo "SSH_PUBLIC_KEY=$(cat $SSH_KEY_PATH)" >> $GITHUB_OUTPUT

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      id: plan
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        CONFIG_DIR=${{ github.workspace }}/azure/fra
        VARS=$(find $CONFIG_DIR -name '*.json')
        echo "$VARS"
        terraform plan -detailed-exitcode -no-color $(for i in $VARS; do echo "-var-file $i"; done) -out=tfplan.binary
        echo "plan-exit-code=$?" >> $GITHUB_OUTPUT

    - name: Post PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format üñå \`${{ steps.format.outcome }}\`
          #### Terraform Validate ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Notify Slack on success
      if: success() && github.event_name == 'pull_request'
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚úÖ Terraform plan succeeded on PR #${{ github.event.number }}",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*‚úÖ Terraform Plan Succeeded*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }} - ${{ github.event.pull_request.title }}>\n*Author:* @${{ github.actor }}\n*Status:* Format ‚úì | Validate ‚úì | Plan ‚úì"
              }
            }]
          }'

    - name: Notify Slack on failure
      if: failure()
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚ùå Terraform workflow FAILED",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*‚ùå Terraform Workflow FAILED*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }}>\n*Logs:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow logs>\n*Author:* @${{ github.actor }}"
              }
            }]
          }'

    - name: Terraform Apply (on PR merge)
      id: apply
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        CONFIG_DIR=${{ github.workspace }}/azure/fra
        VARS=$(find $CONFIG_DIR -name '*.json')
        terraform apply -auto-approve $(for i in $VARS; do echo "-var-file $i"; done)

    - name: Get deployed resources info
      id: resources
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        success()
      run: |
        cd ${{ github.workspace }}/ORCH
        # Get terraform outputs if available
        OUTPUTS=$(terraform output -json 2>/dev/null || echo '{}')

        # Parse configuration files for resource details
        CONFIG_DIR=${{ github.workspace }}/azure/fra
        RESOURCES=$(cat <<EOF
        $(find $CONFIG_DIR -name '*.json' -exec echo "üìÅ {}" \; -exec jq -r '
          if .virtual_machines then
            "VMs: " + (.virtual_machines | keys | join(", "))
          elif .networks then
            "VNets: " + (.networks | to_entries[] | .value.name + " (" + .value.cidr + ")")
          elif .security_groups then
            "NSGs: " + (.security_groups | keys | join(", "))
          elif .resource_groups then
            "Resource Groups: " + (.resource_groups | to_entries[] | .value.name + " [" + .value.location + "]")
          else
            ""
          end' {} \;)
        EOF
        )

        echo "resources<<EOF" >> $GITHUB_OUTPUT
        echo "$RESOURCES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Notify Slack on Apply success
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        success()
      run: |
        RESOURCES="${{ steps.resources.outputs.resources }}"
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d "{
            \"text\": \"‚úÖ Azure Infrastructure Deployed Successfully\",
            \"blocks\": [{
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"*‚úÖ Azure Infrastructure Deployed*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }} - ${{ github.event.pull_request.title }}>\n*Author:* @${{ github.actor }}\n*Region:* fra (Frankfurt)\n\n*Deployed Resources:*\n\`\`\`\n${RESOURCES}\n\`\`\`\"
              }
            }, {
              \"type\": \"context\",
              \"elements\": [{
                \"type\": \"mrkdwn\",
                \"text\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View deployment logs>\"
              }]
            }]
          }"