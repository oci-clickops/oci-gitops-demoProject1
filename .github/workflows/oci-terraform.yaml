name: OCI Terraform pipeline

on:
  pull_request:
    branches:
      - main
    paths:
      - 'oci/**'
  pull_request_target:
    types:
      - closed
    branches:
      - main
    paths:
      - 'oci/**'

  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  projects:
    name: 'project'
    env:
      TF_ACTION_WORKSPACE: "default"
      SCENARIO: oci
      CORE_MODULE_VERSION: v0.0.17

    runs-on: self-hosted
    permissions:
      pull-requests: write
      actions: read
      contents: read
      packages: read
      repository-projects: read

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure Git credentials for private repos
      run: |
        git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"

    - name: Clone OCI Orchestrator
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: git clone https://${GH_TOKEN}@github.com/iblake/clickops-terraform-oci-modules-orchestrator.git ORCH

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1
        terraform_wrapper: true

    - name: 'Setup Orchestrator Instance Principal Auth'
      id: backend
      run: |
        cat > ${{ github.workspace }}/ORCH/providers.tf << EOF
        data "oci_identity_regions" "these" {}

        data "oci_identity_tenancy" "this" {
          tenancy_id = var.tenancy_ocid
        }

        locals {
          regions_map         = { for r in data.oci_identity_regions.these.regions : r.key => r.name }
          regions_map_reverse = { for r in data.oci_identity_regions.these.regions : r.name => r.key }
          home_region_key     = data.oci_identity_tenancy.this.home_region_key
          region_key          = lower(local.regions_map_reverse[var.region])
        }

        provider "oci" {
          auth                = "InstancePrincipal"
          region              = var.region
          tenancy_ocid        = var.tenancy_ocid
          user_ocid           = var.user_ocid
          fingerprint         = var.fingerprint
          private_key_path    = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        provider "oci" {
          auth                 = "InstancePrincipal"
          alias                = "home"
          region               = local.regions_map[local.home_region_key]
          tenancy_ocid         = var.tenancy_ocid
          user_ocid            = var.user_ocid
          fingerprint          = var.fingerprint
          private_key_path     = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags  = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        provider "oci" {
          auth                 = "InstancePrincipal"
          alias                = "secondary_region"
          region               = local.regions_map[local.home_region_key]
          tenancy_ocid         = var.tenancy_ocid
          user_ocid            = var.user_ocid
          fingerprint          = var.fingerprint
          private_key_path     = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags  = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        terraform {
          required_version = ">= 1.3.0"
          required_providers {
            oci = {
              source                = "oracle/oci"
              configuration_aliases = [oci.home]
            }
          }
          backend "oci" {
            bucket    = "__BUCKET__"
            namespace = "__NAMESPACE__"
            auth      = "InstancePrincipal"
            region    = "__REGION__"
          }
        }
        EOF
        source $HOME/.github-runner-env
        sed -i "s|__BUCKET__|$OCI_TF_STATE_BUCKET|g" ${{ github.workspace }}/ORCH/providers.tf
        sed -i "s|__NAMESPACE__|$OCI_TF_STATE_NAMESPACE|g" ${{ github.workspace }}/ORCH/providers.tf
        sed -i "s|__REGION__|$OCI_REGION|g" ${{ github.workspace }}/ORCH/providers.tf
        cd ${{ github.workspace }}/ORCH
        terraform fmt providers.tf

    - name: 'Terraform Init'
      id: init
      run: |
        cd ${{ github.workspace }}/ORCH
        terraform init

    - name: Terraform Format
      id: format
      if: github.event_name == 'pull_request'
      run: |
        cd ${{ github.workspace }}/ORCH
        terraform fmt
        terraform fmt -check

    - name: 'Terraform Validate'
      id: validate
      if: github.event_name == 'pull_request'
      run: |
        cd ${{ github.workspace }}/ORCH
        terraform validate -no-color

    - name: 'Terraform Plan'
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        SCENARIO_DIR=${{ github.workspace }}/$SCENARIO
        VARS=$(find $SCENARIO_DIR -name '*.json')
        echo "$VARS"
        terraform plan -detailed-exitcode -no-color \
          -var="region=${OCI_REGION}" \
          -var="tenancy_ocid=dummy" \
          -var="user_ocid=dummy" \
          -var="fingerprint=dummy" \
          -var="private_key_path=dummy" \
          -var="private_key_password=dummy" \
          $(for i in $VARS; do echo "-var-file $i"; done) -out=tfplan.binary
        echo "plan-exit-code=$?" >> $GITHUB_OUTPUT

    - name: Post PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format üñå \`${{ steps.format.outcome }}\`
          #### Terraform Validate ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Notify Slack on Plan success
      if: success() && github.event_name == 'pull_request'
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚úÖ OCI Terraform plan succeeded on PR #${{ github.event.number }}",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*‚úÖ OCI Terraform Plan Succeeded*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }} - ${{ github.event.pull_request.title }}>\n*Author:* @${{ github.actor }}\n*Status:* Init ‚úì | Validate ‚úì | Plan ‚úì"
              }
            }]
          }'

    - name: Notify Slack on failure
      if: failure()
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "‚ùå OCI Terraform workflow FAILED",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*‚ùå OCI Terraform Workflow FAILED*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }}>\n*Logs:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow logs>\n*Author:* @${{ github.actor }}"
              }
            }]
          }'

    - name: Terraform Apply (on PR merge)
      id: apply
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true
      run: |
        source $HOME/.github-runner-env
        cd ${{ github.workspace }}/ORCH
        SCENARIO_DIR=${{ github.workspace }}/$SCENARIO
        VARS=$(find $SCENARIO_DIR -name '*.json')
        terraform apply -auto-approve \
          -var="region=${OCI_REGION}" \
          -var="tenancy_ocid=dummy" \
          -var="user_ocid=dummy" \
          -var="fingerprint=dummy" \
          -var="private_key_path=dummy" \
          -var="private_key_password=dummy" \
          $(for i in $VARS; do echo "-var-file $i"; done)

    - name: Get deployed resources info
      id: resources
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        success()
      run: |
        cd ${{ github.workspace }}/ORCH
        SCENARIO_DIR=${{ github.workspace }}/$SCENARIO

        COMPUTE=$(find $SCENARIO_DIR -name '*compute*.json' -exec jq -r '.compute_instances | to_entries[] | "‚Ä¢ " + .value.display_name' {} \; 2>/dev/null | sort -u)
        ADBS=$(find $SCENARIO_DIR -name '*database*.json' -exec jq -r '.autonomous_databases | to_entries[] | "‚Ä¢ " + .value.display_name + " [" + (.value.db_workload // "OLTP") + "]"' {} \; 2>/dev/null | sort -u)
        VCNS=$(find $SCENARIO_DIR -name '*network*.json' -o -name '*vcn*.json' -exec jq -r '.vcns | to_entries[] | "‚Ä¢ " + .value.display_name + " (" + (.value.cidr_blocks[0] // .value.cidr_block) + ")"' {} \; 2>/dev/null | sort -u)
        SUBNETS=$(find $SCENARIO_DIR -name '*subnet*.json' -o -name '*network*.json' -exec jq -r '.subnets | to_entries[] | "‚Ä¢ " + .value.display_name' {} \; 2>/dev/null | sort -u)
        PUBLIC_IPS=$(terraform output -json 2>/dev/null | jq -r 'to_entries[] | select(.key | contains("public_ip") or contains("ip_address")) | "‚Ä¢ " + .value.value' 2>/dev/null || echo "")

        echo "resources<<EOF" >> $GITHUB_OUTPUT
        echo "VCNs:" >> $GITHUB_OUTPUT
        echo "${VCNS:-  None}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Subnets:" >> $GITHUB_OUTPUT
        echo "${SUBNETS:-  None}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Compute Instances:" >> $GITHUB_OUTPUT
        echo "${COMPUTE:-  None}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Autonomous Databases:" >> $GITHUB_OUTPUT
        echo "${ADBS:-  None}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Public IPs:" >> $GITHUB_OUTPUT
        echo "${PUBLIC_IPS:-  Retrieving...}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Notify Slack on Apply success
      if: >
        github.event_name == 'pull_request_target' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        success()
      run: |
        RESOURCES="${{ steps.resources.outputs.resources }}"
        source $HOME/.github-runner-env
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d "{
            \"text\": \"‚úÖ OCI Infrastructure Deployed Successfully\",
            \"blocks\": [{
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"*‚úÖ OCI Infrastructure Deployed*\n*PR:* <${{ github.event.pull_request.html_url }}|#${{ github.event.number }} - ${{ github.event.pull_request.title }}>\n*Author:* @${{ github.actor }}\n*Region:* ${OCI_REGION}\n\n*Deployed Resources:*\n\`\`\`\n${RESOURCES}\n\`\`\`\"
              }
            }, {
              \"type\": \"context\",
              \"elements\": [{
                \"type\": \"mrkdwn\",
                \"text\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View deployment logs>\"
              }]
            }]
          }"
