name: OCI Terraform pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'oci/**'  
  pull_request:
    branches:
      - main
    paths:
    - 'oci/**' 

  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod 

# env:
  #TF_LOG: INFO

jobs:
 projects:
    name: 'project'
    env:
     TF_ACTION_WORKSPACE: "default"
    # Operational scenario
     SCENARIO: oci
     CORE_MODULE_VERSION: v0.0.17
            
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    permissions:
      pull-requests: write
      actions: read
      contents: read
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: 'Checkout'
      uses: actions/checkout@v4

    # Runner package dependencies
    - uses: actions/setup-node@v2
      with:
        node-version: '20'  
    
    # Runner setup - ENABLE WHILE USING CHECKOV
    # - name: Install Checkov
    #   run: |
    #     sudo dnf install python3.9-pip python3-setuptools python3-pip-wheel -y
    #     pip install checkov
              
    # Gather Orchestrator Module
    - name: 'Clone Orchestrator Module'
      # run: git clone https://github.com/oci-landing-zones/terraform-oci-modules-orchestrator.git ORCH
      run: git clone https://github.com/iblake/clickops-terraform-oci-modules-orchestrator.git ORCH

    # Setup Terraform Binary
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.1
        terraform_wrapper: true

    # Setup Terraform backend overriding default Orchestrator Provider options
    - name: 'Setup Orchestrator Instance Principal Auth'
      id: backend
      run: |
        cat > ${{ github.workspace }}/ORCH/providers.tf << EOF
        data "oci_identity_regions" "these" {}

        data "oci_identity_tenancy" "this" {
          tenancy_id = var.tenancy_ocid
        }

        locals {
          regions_map         = { for r in data.oci_identity_regions.these.regions : r.key => r.name } # All regions indexed by region key.
          regions_map_reverse = { for r in data.oci_identity_regions.these.regions : r.name => r.key } # All regions indexed by region name.
          home_region_key     = data.oci_identity_tenancy.this.home_region_key                         # Home region key obtained from the tenancy data source
          region_key          = lower(local.regions_map_reverse[var.region])                           # Region key obtained from the region name
        }

        provider "oci" {
           auth                = "InstancePrincipal"
          region               = var.region
          tenancy_ocid         = var.tenancy_ocid
          user_ocid            = var.user_ocid
          fingerprint          = var.fingerprint
          private_key_path     = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags  = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        provider "oci" {
          auth                 = "InstancePrincipal"
          alias                = "home"
          region               = local.regions_map[local.home_region_key]
          tenancy_ocid         = var.tenancy_ocid
          user_ocid            = var.user_ocid
          fingerprint          = var.fingerprint
          private_key_path     = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags  = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        provider "oci" {
          auth                 = "InstancePrincipal"
          alias                = "secondary_region"
          region               = local.regions_map[local.home_region_key]
          tenancy_ocid         = var.tenancy_ocid
          user_ocid            = var.user_ocid
          fingerprint          = var.fingerprint
          private_key_path     = var.private_key_path
          private_key_password = var.private_key_password
          ignore_defined_tags  = ["Oracle-Tags.CreatedBy", "Oracle-Tags.CreatedOn"]
        }

        terraform {
          required_version = ">= 1.3.0"
          required_providers {
            oci = {
              source                = "oracle/oci"
              configuration_aliases = [oci.home]
            }
          }
            backend "oci" {
              bucket = "__BUCKET__"
              namespace ="__NAMESPACE__"
              auth = "InstancePrincipal"
              region = "__REGION__"
            }
        }
        EOF
        source $HOME/.github-runner-env
        sed -i "s|__BUCKET__|$OCI_TF_STATE_BUCKET|g" ${{ github.workspace }}/ORCH/providers.tf
        sed -i "s|__NAMESPACE__|$OCI_TF_STATE_NAMESPACE|g" ${{ github.workspace }}/ORCH/providers.tf
        sed -i "s|__REGION__|$REGION|g" ${{ github.workspace }}/ORCH/providers.tf

    # Landing Zone Terraform Orchestrator and Base Modules initialization
    - name: 'Terraform Init'
      id: init
      run: |
       cd ${{ github.workspace }}/ORCH
       terraform init
        # terraform init -upgrade \
        # -backend-config="bucket=${{ vars.OCI_TF_STATE_BUCKET }}" \
        # -backend-config="namespace=${{ vars.OCI_TF_STATE_NAMESPACE }}" \
        # -backend-config="region=${{ vars.REGION }}" \
        # -backend-config="key=${{ env.SCENARIO_DIR }}/terraform.tfstate" || exit 1
    
    # Integration: Terraform Format
    # - name: 'Terraform Format'
    #   id: format
    #   if: github.ref != 'refs/heads/main'
    #   run: |
    #    cd ${{ github.workspace }}/ORCH
    #    terraform fmt -check
      
    # Test: Terraform Validate
    - name: 'Terraform Validate'
      id: validate
      if: github.ref != 'refs/heads/main' && (success() || failure())
      run: |
       cd ${{ github.workspace }}/ORCH
       terraform validate -no-color
      
    # Integration: Terraform Plan
    - name: 'Terraform Plan'
      id: plan
      if: github.event_name == 'pull_request'
      run: |
       cd ${{ github.workspace }}/ORCH
       SCENARIO_DIR=${{ github.workspace }}/$SCENARIO
       VARS=`find $SCENARIO_DIR -name *json`
       echo $VARS
       #export TF_LOG=DEBUG
       terraform plan -no-color `for i in $VARS; do echo "-var-file $i"; done` --out tfplan.binary
      # continue-on-error: true

    # Run Checkov against configuration - DISABLED UNTIL OSSA APPROVAL
    # - name: Checkov
    #   id: checkov
    #   if: success()
    #   run: |
    #     cd ${{ github.workspace }}/ORCH
    #     terraform show -json tfplan.binary | jq '.' > tfplan.json
    #     checkov -f tfplan.json --framework terraform_plan -o sarif

    # Send result of testing & integration to the pull request information issue
    - name: 'Update Pull Request'
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && (success() || failure())
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome}}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          ### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    # Integration: Show fail status if plan failed
    - name: 'Terraform Plan Status'
      if: steps.plan.outcome == 'failure'
      run: exit 1

    # Deployment: Terraform apply when merge request
    - name: Terraform Apply
      #if: github.event.pull_request.merged == true && github.event.action == 'closed'
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
       cd ${{ github.workspace }}/ORCH
       SCENARIO_DIR=${{ github.workspace }}/$SCENARIO
       VARS=`find $SCENARIO_DIR -name *json`
       echo $VARS
       terraform apply -no-color `for i in $VARS; do echo "-var-file $i"; done` --auto-approve
      continue-on-error: false

    ### WARNING #### - UNCOMMENT REST OF THE FILE JUST IF YOU WANT TO PERFORM A CLEANUP
    # Perform Destroy Preview configured in the pipeline to execute as needed after pull request 
    # - name: Terraform Destroy Preview
    #   id: destroypreview
    #   if: github.event_name == 'pull_request'
    #   run: |
    #    cd ${{ github.workspace }}/OELZ_CORE
    #    OE01_DIR=${{ github.workspace }}/OE01
    #    VARS=`ls $OE01_DIR/*json`
    #    echo "${{ secrets.provider_private_key }}" > oci4cca.pem
    #    terraform destroy -no-color `for i in $VARS; do echo "-var-file $i"; done`
    #   continue-on-error: false

    #     # Send result of testing & integration to the pull request information issue
    # - name: 'Update Pull Request with Destroy Preview information'
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "${{ steps.destroypreview.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome}}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       ### Terraform Destroy Preview üìñ\`${{ steps.destroypreview.outcome }}\`
          
    #       <details><summary>Show Destroy</summary>
          
    #       \`\`\`terraform\n
    #       ${process.env.DESTROYPREVIEW}
    #       \`\`\`
          
    #       </details>
          
    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    #   # Destroy step configured in the pipeline to execute as needed after merge request 
    # - name: Terraform Destroy
    #   id: destroy
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: |
    #    cd ${{ github.workspace }}/ORCH
    #    SCENARIO_DIR=${{ github.workspace }}/$SCENARIO
    #    VARS=`ls $SCENARIO_DIR/oci-credentials.tfvars.json`
    #    terraform destroy -no-color `for i in $VARS; do echo "-var-file $i"; done` --auto-approve
    #   continue-on-error: false
